{"tagline":"An objective-c 2.0 JSON RPC Client","body":"objc-JSONRpc\r\n============\r\n\r\nAn objective-c 2.0 JSON RPC Client. Currently only supports json rpc version 2.0.\r\n\r\n#### Todo:\r\n* Support ARC (might be a problem since JSONKit does not support ARC at the moment)\r\n\r\n#### Supports:\r\n* Single calls\r\n* Notifications\r\n* Multicall\r\n\r\nHow-To\r\n-------------------------\r\n\r\nFollow these simple steps:\r\n\r\n* Add RPC Client folder from within this project to your project\r\n* #import \"JSONRPCClient+Invoke.h\"\r\n* Start doing calls\r\n \r\nNB: Remove JSONKit either from this client or your project if you already uses it to avoid symbol conflicts.\r\n\r\n```objective-c\r\n    JSONRPCClient *rpc = [[JSONRPCClient alloc] initWithServiceEndpoint:@\"... URL to your endpoint\"];\r\n    [rpc invoke:@\"your method\" params:nil onCompleted:^(RPCResponse *response) {\r\n        \r\n        NSLog(@\"Respone: %@\", response);\r\n        NSLog(@\"Error: %@\", response.error);\r\n        NSLog(@\"Result: %@\", response.result);\r\n        \r\n    }];\r\n    [rpc release];\r\n```\r\n\r\n#### Invoking methods/requests\r\n\r\nThese methods is public when you have an instance of the RPC Client.\r\n\r\n```objective-c\r\n/**\r\n * Invokes a RPCRequest against the end point\r\n *\r\n * @param RPCRequest reqeust The request to invoke\r\n * @param RPCCompletedCallback A callback method to invoke when request is done (or any error accours)\r\n * @return NSString The used request id. Can be used to match callback's if neccesary\r\n */\r\n- (NSString *) invoke:(RPCRequest*) request onCompleted:(RPCCompletedCallback)callback;\r\n\r\n/**\r\n * Invokes a method against the end point\r\n *\r\n * @param NSString method The method to invoke\r\n * @param id Either named or un-named parameter list (or nil)\r\n * @param RPCCompletedCallback A callback method to invoke when request is done (or any error accours)\r\n * @return NSString The used request id. Can be used to match callback's if neccesary\r\n */\r\n- (NSString *) invoke:(NSString*) method params:(id) params  onCompleted:(RPCCompletedCallback)callback;\r\n\r\n/**\r\n * Invokes a method against endpoint providing a way to define both a success callback and a failure callback.\r\n *\r\n * @param NSString method The method to invoke\r\n * @param id Either named or un-named parameter list (or nil)\r\n * @param RPCSuccessCallback A callback method to invoke when request finishes successfull\r\n * @param RPCFailedCallback A callback method to invoke when request finishes with an error\r\n * @return NSString The used request id. Can be used to match callback's if neccesary\r\n */\r\n- (NSString *) invoke:(NSString*) method params:(id) params onSuccess:(RPCSuccessCallback)successCallback onFailure:(RPCFailedCallback)failedCallback;\r\n\r\n```\r\n\r\n#### Invoking multicall\r\n\r\nMulticalls is a great way to send multiple requests as once. \r\n\r\n````objective-c\r\n/**\r\n * Sends  batch of RPCRequest objects to the server. The call to this method must be nil terminated.\r\n * \r\n * @param RPCRequest request The first request to send\r\n * @param ...A list of RPCRequest objects to send, must be nil terminated\r\n */\r\n- (void) batch:(RPCRequest*) request, ...;\r\n````\r\n\r\n##### Example of a multicall\r\n\r\n````objective-c\r\n  JSONRPCClient *rpc = [[JSONRPCClient alloc] initWithServiceEndpoint:@\"...\"];\r\n\r\n  RPCRequest *doWork = [RPCRequest requestWithMethod:@\"doWork\" params:nil];\r\n  doWork.callback = ^(RPCResponse *response)\r\n  {\r\n    // Handle response here\r\n  };\r\n  \r\n  RPCRequest *doSomeOtherWork = [RPCRequest requestWithMethod:@\"doSomeOtherWork\" params:nil];\r\n  doSomeOtherWork.callback = ^(RPCResponse *response)\r\n  {\r\n    // Handle response here\r\n  };\r\n\r\n  [rpc batch:doWork, doSomeOtherWork, nil];\r\n  [rpc release];\r\n````\r\n\r\n#### Invoking notifications\r\n\r\nYou need to ````#import \"JSONRPCClient+Notification.h\"```` to add notification support to the JSONRPCClient. These methods are added to the class as a category.\r\n\r\n````objective-c\r\n\r\n/**\r\n * Sends a notification to json rpc server.\r\n *\r\n * @param NSString method Method to call\r\n */\r\n- (void) notify:(NSString *)method;\r\n\r\n/**\r\n * Sends a notification to json rpc server.\r\n *\r\n * @param NSString method Method to call\r\n * @param id Either named or un-named parameter list (or nil)\r\n */\r\n- (void) notify:(NSString *)method params:(id)params;\r\n````\r\n\r\n##### Example of a notification\r\n\r\nThis could be used to keep a session alive on a webserver\r\n\r\n````objective-c\r\n  JSONRPCClient *rpc = [[JSONRPCClient alloc] initWithServiceEndpoint:@\"...\"];\r\n  [rpc notify:@\"keepAlive\"];\r\n  [rpc release];\r\n````\r\n","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Objc-jsonrpc","google":""}